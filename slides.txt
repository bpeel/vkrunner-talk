SVG: vkrunner-logo.svg
---

## Overview

* Introduction
* History
* Examples
* Current status
* Future
* Questions

---

### Introduction

---

## What is VkRunner?

* Tool to test shaders on your Vulkan driver
* Inspired by Piglit’s shader_runner
* Minimal overhead to execute a script
* Just write the scripts and some simple commands to execute them
* Standalone tool, runs the script and reports status

---

## Example

```
#include simple-example.shader_test
```

---

## Example

```
$ vkrunner ./simple-example.shader_test
Command failed at line 18
Probe color at (0,0)
  Expected: 1.000000 0.000000 0.000000 1.000000
  Observed: 0.000000 1.000000 0.000000 1.000000
PIGLIT: {"result": "fail" }
```

---

## Behind the scenes

* Compiles the shader to SPIR-V by invoking glslang as an external process.
* Creates pipelines for the state for each draw command.
* Creates an offscreen framebuffer (no window system support).
* Puts test commands into a command buffer and executes it.
* Probes result.

---

### History

---

## ARB_gl_spirv

* VkRunner was created during Igalia’s work to add support for ARB_gl_spirv to the i965 driver in Mesa.
* ARB_gl_spirv uses the same compiler as Intel’s Vulkan driver.
* We were testing this with an adaptation of Piglit’s shader_runner.

---

* shader_runner is the same principle as VkRunner.
* Tested ARB_gl_spirv by automatically converting existing shader_runner tests to SPIR-V.
* Piglit has many many tests.
* This ended up testing more of the Intel SPIR-V compiler than was tested with existing Vulkan tests.
* We wanted a quick way to verify whether test failures were specific to SPIR-V on OpenGL or also happen with Vulkan.

---

* shader_runner tests can be converted to VkRunner with minimal changes.
* However there are differences because of how Vulkan works.
* For GL, shader_runner can use the API to query properties of the shader such as the uniform names.
* This isn’t available in Vulkan.
* Instead we use explicit offsets to set uniforms and SSBOs.

---

## shader_runner example

SVG: piglit-test-01.svg

---

## shader_runner example

SVG: piglit-test-02.svg

---

## shader_runner example

SVG: piglit-test-03.svg

---

## VkRunner equivalent

SVG: vkrunner-equivalent-01.svg

---

## VkRunner equivalent

SVG: vkrunner-equivalent-02.svg

---

## VkRunner equivalent

SVG: vkrunner-equivalent-03.svg

---

## Some improvements over shader_runner

* shader_runner code grown organically over time. Lives in a single large C file.
* VkRunner code written from scratch with the benefit of hindsight.
* Tries to partially automatically generate commands.
  * Systematic method for setting pipeline properties.
  * Try to support all formats for vertex data and framebuffer.

---

### Examples

---

## Vertex data

SVG: vertex-data-01.svg

---

## Vertex data

SVG: vertex-data-02.svg

---

## Vertex data

SVG: vertex-data-03.svg

---

## Vertex data

SVG: vertex-data-shader.svg

---

## Indices

```
[indices]
0 1 2 3     65535
4 5 6 7     65535
8 9 10 11   65535
12 13 14 15 65535
```

---

## Draw command

```
primitiveRestartEnable true

draw arrays indexed TRIANGLE_STRIP 0 20
```

---

## Vertex data

SVG: vertex-data-all.svg

---

## Requires section

```
#include requires.shader_test
```

---

## Compute shader

```
#include compute-shader.shader_test
```

---

## SPIR-V source

```
[fragment shader spirv]
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %main "main" %color
               OpExecutionMode %main OriginUpperLeft
               OpSource GLSL 450
               OpDecorate %color Location 0
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
      %float = OpTypeFloat 32
%_ptr_Output_float = OpTypePointer Output %float
      %color = OpVariable %_ptr_Output_float Output
    %float_1 = OpConstant %float 1
       %main = OpFunction %void None %3
          %5 = OpLabel
               OpStore %color %float_1
               OpReturn
               OpFunctionEnd
```

---

## Binary source

* Script available to precompile scripts to binary format

```
./precompile-script.py -o precompiled *.shader_test
vkrunner precompiled/*.shader_test
```

* Useful for running on devices where running the compiler isn’t practical.

---

## Binary source

```
#include precompiled/simple-spirv.shader_test
```
